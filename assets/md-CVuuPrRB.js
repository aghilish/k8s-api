import{aI as l,o as r,c as u,k as c,e,g as d,ag as p,b as m,ac as o,q as v,s as f,B as a}from"./modules/vue-Dyu_1XSi.js";import{I as C}from"./slidev/default-DcZK-fhY.js";import{u as b,f as g}from"./slidev/context-D7SorI8W.js";import"./index-AE2WFcrj.js";import"./modules/shiki-JHeX96R8.js";const I={__name:"slide1.md__slidev_28",setup(k){const{$slidev:x,$nav:y,$clicksContext:n,$clicks:L,$page:_,$renderContext:w,$frontmatter:s}=b();return n.setup(),(E,t)=>{const i=l("click");return r(),u(C,v(f(a(g)(a(s),27))),{default:c(()=>[t[1]||(t[1]=e("h1",null,"Common Expression Language (CEL)",-1)),d(`
Let us now introduce the Common Expression Language, or CEL.
It's a powerful feature that lets you write validation rules directly inside your Kubernetes CustomResourceDefinitions.
Since Kubernetes v1.25, CEL support is available in beta and lets you express constraints clearly and declaratively.
Marker \`//+kubebuilder:validation:XValidation:rule\` can be used for this scope.
`),p((r(),m("div",null,t[0]||(t[0]=[e("p",null,[o("For ensuring your CRD configurations are well-defined, you can leverage marker comments with "),e("code",null,"Common Expression Language"),o(" ("),e("code",null,"CEL"),o("). Since Kubernetes v1.25 introduced CEL support for validation in beta, you can now write expressions to validate your custom resources.")],-1),e("p",null,[o("Marker "),e("code",null,"//+kubebuilder:validation:XValidation:rule"),o(" can be used for this scope.")],-1)]))),[[i]])]),_:1},16)}}};export{I as default};
